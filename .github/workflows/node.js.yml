name: Deploy React/Next.js Project (Pull & Build on Server)

on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Pull, Build, and Deploy Frontend on Server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          port: ${{ secrets.VPS_PORT }}
          key: ${{ secrets.VPS_SSH }}
          script: |
            #!/bin/bash
            set -e # Exit immediately if a command exits with a non-zero status

            # --- Define paths ---
            # This is the path to your React/Next.js source code repository on the server
            #PROJECT_SOURCE_DIR="/home/kiya/projects/Frontend/FrontEnd/"
            # This is where Nginx expects the built files to be served from
            NGINX_FRONTEND_ROOT=${{secrets.VPS_REMOTE_PATH}}

            echo "Starting deployment process on the server..."

            # 1. Navigate to the project directory
            echo "Navigating to project directory: $PROJECT_SOURCE_DIR"
            cd "$NGINX_FRONTEND_ROOT" || {
              echo "Error: Unable to change directory to $PROJECT_SOURCE_DIR. Does it exist?"
              exit 1
            }

            # 2. Ensure the correct branch is checked out and pull the latest code
            echo "Checking out main branch and pulling latest changes..."
            git checkout main || {
              echo "Error: Failed to checkout main branch."
              exit 1
            }
            git pull origin main || {
              echo "Error: Failed to pull from origin/main. Check repository access."
              exit 1
            }

            # 3. Install Node.js dependencies
            echo "Installing Node.js dependencies..."
            # Use --force and --legacy-peer-deps if you consistently face peer dependency issues,
            # but it's better to resolve them if possible.
            npm install --force || { # Use --production to skip dev dependencies in prod
              echo "Error: npm install failed. Check network, package.json, and Node.js/npm versions."
              exit 1
            }

            # 4. Build the Project
            echo "Building the React/Next.js project..."
            # Ensure VITE_REACT_APP_PUBLIC_API_URL is correctly set during the build
            VITE_REACT_APP_PUBLIC_API_URL="https://versavps.huludelala.com/api/v1" npm run build || {
              echo "Error: Project build failed. Check your build script and dependencies."
              exit 1
            }

            # 5. Prepare Nginx root directory
            echo "Preparing Nginx serving directory: $NGINX_FRONTEND_ROOT"
            # Ensure the target directory exists
            mkdir -p "$NGINX_FRONTEND_ROOT" || {
              echo "Error: Failed to create Nginx root directory."
              exit 1
            }

            # 6. Copy the built files to the Nginx root directory
            echo "Copying built files from $PROJECT_SOURCE_DIR/dist/ to $NGINX_FRONTEND_ROOT"
            # Remove existing content in Nginx's serving directory first for a clean deploy
            rm -rf "${NGINX_FRONTEND_ROOT:?}"/* || { # :? is a safety mechanism
              echo "Warning: Failed to clean $NGINX_FRONTEND_ROOT. Proceeding with copy."
            }
            # Copy all contents of the project's dist folder to the Nginx root
            cp -r "$PROJECT_SOURCE_DIR/dist/"* "$NGINX_FRONTEND_ROOT/" || {
              echo "Error: Failed to copy built files to Nginx root. Check permissions."
              exit 1
            }
            echo "Built files copied successfully."

            # Optional: Clear Nginx cache if you're using it and want to ensure fresh content
            # (Requires Nginx config for cache and appropriate permissions)
            # sudo nginx -s reload # Or if you want to restart (more disruptive): sudo systemctl restart nginx
            # echo "Nginx reloaded (if applicable)."

            echo "Deployment process completed successfully!"

  notify:
    runs-on: ubuntu-latest
    needs: deploy # This makes the notify job depend on the deploy job
    if: success() || failure() # This ensures the notify job runs whether deploy succeeds or fails
    steps:
      - name: Send Telegram Notifications
        env:
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        run: |
          url=${{ secrets.STAGE_DEPLOYMENT_URL }}

          if [[ "${{ job.status }}" == "success" ]]; then
            MESSAGE="üöÄ Deployment Success! üöÄ %0A"
            MESSAGE+="‚îú Project: Versa Link %0A"
            MESSAGE+="‚îú Environment: Stage %0A"
            MESSAGE+="‚îú Branch: ${{ github.ref }} %0A"
            MESSAGE+="‚îú Commit Message: ${{ github.event.head_commit.message }} %0A"
            MESSAGE+="‚îú Deployed by: ${{ github.actor }}%0A"
            MESSAGE+="‚îú Date and Time: $(date +'%Y-%m-%d %H:%M:%S') %0A"
            MESSAGE+="‚îî Deployment URL: $url %0A"
          else
            MESSAGE="‚ùå Deployment Failed! ‚ùå %0A"
            MESSAGE+="‚îú Project: Versa Link %0A"
            MESSAGE+="‚îú Environment: Stage %0A"
            MESSAGE+="‚îú Branch: ${{ github.ref }} %0A"
            MESSAGE+="‚îú Commit Message: ${{ github.event.head_commit.message }} %0A"
            MESSAGE+="‚îú Deployed by: ${{ github.actor }}%0A"
            MESSAGE+="‚îú Date and Time: $(date +'%Y-%m-%d %H:%M:%S') %0A"
            MESSAGE+="‚îî Check workflow run: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }} %0A"
          fi

          curl -s -X POST "https://api.telegram.org/bot$TELEGRAM_BOT_TOKEN/sendMessage" -d "chat_id=$TELEGRAM_CHAT_ID" -d "text=$MESSAGE"